{
	// Place your COMPETITIVE workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"basicTemplate": {
		"prefix": "tcpp",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"void setIO(){",
			"    string file = __FILE__;",
			"",
			"    file = string(file.begin(), file.end()-3);",
			"    string out_file = file + \"out\";",
			"    string in_file = file + \"in\";",
			"",
			"    freopen(in_file.c_str(), \"r\", stdin);",
			"    freopen(out_file.c_str(), \"w\", stdout);",
			"}",
			"",
			"void solution(string cadena){",
			"",
			"}",
			"",
			"int main(){",
			"ios::sync_with_stdio(0);",
			"cin.tie(0);",
			"    if(getenv(\"CP_IO\"))",
			"        setIO();    ",
			"",
			"    int n;",
			"    scanf(\"%d\",&n);",
			"    for (int i = 0; i < n; i++){",
			"    }",
			"    return 0;",
			"}"
		  ],
		"description": "basicTemplate"
	  }
}

